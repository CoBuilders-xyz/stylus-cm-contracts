import { ethers } from 'ethers';

// Import external ABIs
import cacheManagerABI from '../abis/external/cacheManager.abi.json';
import arbWasmCacheABI from '../abis/external/arbWasmCache.abi.json';

// External Contract ABIs Registry
export const ExternalABIs = {
  CacheManager: cacheManagerABI.abi,
  ArbWasmCache: arbWasmCacheABI.abi,
};

// Contract Interface Registry for external contracts
export const ExternalInterfaces = {
  CacheManager: () => new ethers.Interface(ExternalABIs.CacheManager),
  ArbWasmCache: () => new ethers.Interface(ExternalABIs.ArbWasmCache),
};

// Utility function to get external contract instance
export function getExternalContractInstance(
  contractName: keyof typeof ExternalABIs,
  address: string,
  signer: ethers.Signer | ethers.Provider
): ethers.Contract {
  const abi = ExternalABIs[contractName];
  if (!abi || abi.length === 0) {
    throw new Error(`External ABI not found for contract: ${contractName}`);
  }

  return new ethers.Contract(address, abi, signer);
}

// Export ABIs for backward compatibility
export { cacheManagerABI, arbWasmCacheABI };

// Note: For our own contracts (CacheManagerAutomation, BiddingEscrow),
// use the types generated by Hardhat in build/typechain-types/
